// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Personnel_Division.Models;

public partial class OtdelKadrovPraktikaContext : DbContext
{
    public OtdelKadrovPraktikaContext()
    {
    }

    public OtdelKadrovPraktikaContext(DbContextOptions<OtdelKadrovPraktikaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Contract> Contracts { get; set; }

    public virtual DbSet<Division> Divisions { get; set; }

    public virtual DbSet<Sanction> Sanctions { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Vacancy> Vacancies { get; set; }

    public virtual DbSet<Vacation> Vacations { get; set; }

    public virtual DbSet<Worker> Workers { get; set; }

    public virtual DbSet<Worker_Division> Worker_Divisions { get; set; }

    public virtual DbSet<Worker_Vacancy> Worker_Vacancies { get; set; }

    public virtual DbSet<Worker_Vacation> Worker_Vacations { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-JVTTJKA\\SQLEXPRESS;Initial Catalog=OtdelKadrovPraktika;Integrated Security=True;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Contract>(entity =>
        {
            entity.HasOne(d => d.ID_WorkerNavigation).WithMany(p => p.Contracts).HasConstraintName("FK_Contract_Worker");
        });

        modelBuilder.Entity<Sanction>(entity =>
        {
            entity.HasOne(d => d.ID_WorkerNavigation).WithMany(p => p.Sanctions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sanction_Worker");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.ID_User).HasName("PK__Users__ED4DE44256B6ECB4");
        });

        modelBuilder.Entity<Vacancy>(entity =>
        {
            entity.HasOne(d => d.ID_DivisionNavigation).WithMany(p => p.Vacancies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vacancy_Division");
        });

        modelBuilder.Entity<Worker_Division>(entity =>
        {
            entity.ToTable("Worker_Division", tb =>
                {
                    tb.HasTrigger("UpdateEmployeeCount");
                    tb.HasTrigger("UpdateEmployeeCountOnDelete");
                });

            entity.HasOne(d => d.ID_DivisionNavigation).WithMany(p => p.Worker_Divisions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Worker_Division_Division");

            entity.HasOne(d => d.ID_WorkerNavigation).WithMany(p => p.Worker_Divisions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Worker_Division_Worker");
        });

        modelBuilder.Entity<Worker_Vacancy>(entity =>
        {
            entity.HasOne(d => d.ID_VacancyNavigation).WithMany(p => p.Worker_Vacancies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Worker_Vacancy_Vacancy");

            entity.HasOne(d => d.ID_WorkerNavigation).WithMany(p => p.Worker_Vacancies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Worker_Vacancy_Worker");
        });

        modelBuilder.Entity<Worker_Vacation>(entity =>
        {
            entity.HasOne(d => d.ID_VacationNavigation).WithMany(p => p.Worker_Vacations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Worker_Vacation_Vacation");

            entity.HasOne(d => d.ID_WorkerNavigation).WithMany(p => p.Worker_Vacations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Worker_Vacation_Worker");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}